{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gibi\\\\Documents\\\\IMT_CIENCIA_DA_COMPUTACAO\\\\PII\\\\Chatbot_Quantum\\\\ProjetoIntegrador2025\\\\src\\\\context\\\\ChatContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useCallback, useContext, useEffect } from 'react';\nimport AuthContext from './AuthContext';\n\n// Create Chat Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChatContext = /*#__PURE__*/createContext();\n\n// Lessons data\nconst LESSONS = [{\n  id: 1,\n  title: 'Introdu√ß√£o √† Computa√ß√£o Qu√¢ntica',\n  description: 'Fundamentos e conceitos b√°sicos da computa√ß√£o qu√¢ntica.',\n  icon: 'üî¨',\n  color: 'bg-blue-100'\n}, {\n  id: 2,\n  title: 'Qubits e Superposi√ß√£o',\n  description: 'Entendendo os bits qu√¢nticos e o princ√≠pio da superposi√ß√£o.',\n  icon: 'üîÑ',\n  color: 'bg-purple-100'\n}, {\n  id: 3,\n  title: 'Emaranhamento Qu√¢ntico',\n  description: 'O fen√¥meno do emaranhamento e suas aplica√ß√µes.',\n  icon: 'üîó',\n  color: 'bg-pink-100'\n}, {\n  id: 4,\n  title: 'Portas Qu√¢nticas',\n  description: 'Opera√ß√µes b√°sicas em sistemas qu√¢nticos.',\n  icon: 'üö™',\n  color: 'bg-indigo-100'\n}, {\n  id: 5,\n  title: 'Algoritmos Qu√¢nticos I',\n  description: 'Algoritmo de Deutsch-Jozsa e outros algoritmos introdut√≥rios.',\n  icon: 'üìä',\n  color: 'bg-green-100'\n}, {\n  id: 6,\n  title: 'Algoritmos Qu√¢nticos II',\n  description: 'Algoritmo de Grover e buscas qu√¢nticas.',\n  icon: 'üîç',\n  color: 'bg-yellow-100'\n}, {\n  id: 7,\n  title: 'Algoritmos Qu√¢nticos III',\n  description: 'Algoritmo de Shor e fatora√ß√£o qu√¢ntica.',\n  icon: 'üî¢',\n  color: 'bg-red-100'\n}, {\n  id: 8,\n  title: 'Corre√ß√£o de Erros Qu√¢nticos',\n  description: 'T√©cnicas para mitigar erros em computadores qu√¢nticos.',\n  icon: 'üõ†Ô∏è',\n  color: 'bg-orange-100'\n}, {\n  id: 9,\n  title: 'Computadores Qu√¢nticos Atuais',\n  description: 'Estado da arte e implementa√ß√µes f√≠sicas.',\n  icon: 'üíª',\n  color: 'bg-teal-100'\n}, {\n  id: 10,\n  title: 'Futuro da Computa√ß√£o Qu√¢ntica',\n  description: 'Tend√™ncias e desafios na √°rea.',\n  icon: 'üöÄ',\n  color: 'bg-cyan-100'\n}];\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const [activeLesson, setActiveLesson] = useState(null);\n  const [conversations, setConversations] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load conversations from localStorage on mount or when user changes\n  useEffect(() => {\n    if (currentUser) {\n      const storedConversations = localStorage.getItem(`quantum_conversations_${currentUser.id}`);\n      if (storedConversations) {\n        setConversations(JSON.parse(storedConversations));\n      }\n    }\n  }, [currentUser]);\n\n  // Save conversations to localStorage when they change\n  useEffect(() => {\n    if (currentUser && Object.keys(conversations).length > 0) {\n      localStorage.setItem(`quantum_conversations_${currentUser.id}`, JSON.stringify(conversations));\n    }\n  }, [conversations, currentUser]);\n\n  // Get all lessons\n  const getLessons = useCallback(() => {\n    return LESSONS;\n  }, []);\n\n  // Get lesson by ID\n  const getLessonById = useCallback(lessonId => {\n    return LESSONS.find(lesson => lesson.id === Number(lessonId)) || null;\n  }, []);\n\n  // Set active lesson\n  const selectLesson = useCallback(lessonId => {\n    const lesson = getLessonById(lessonId);\n    setActiveLesson(lesson);\n\n    // Initialize conversation for this lesson if it doesn't exist\n    if (currentUser && lesson) {\n      setConversations(prev => {\n        if (!prev[lesson.id]) {\n          return {\n            ...prev,\n            [lesson.id]: []\n          };\n        }\n        return prev;\n      });\n    }\n    return lesson;\n  }, [currentUser, getLessonById]);\n\n  // Send message\n  const sendMessage = useCallback(async message => {\n    if (!activeLesson || !currentUser) return null;\n    setLoading(true);\n    setError(null);\n    try {\n      // User message\n      const userMessage = {\n        id: Date.now(),\n        text: message,\n        sender: 'user',\n        timestamp: new Date().toISOString()\n      };\n\n      // Update conversations with user message\n      setConversations(prev => ({\n        ...prev,\n        [activeLesson.id]: [...(prev[activeLesson.id] || []), userMessage]\n      }));\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Generate bot response based on lesson\n      let botResponse;\n      switch (activeLesson.id) {\n        case 1:\n          botResponse = \"A computa√ß√£o qu√¢ntica √© um paradigma de computa√ß√£o que utiliza fen√¥menos da mec√¢nica qu√¢ntica, como superposi√ß√£o e emaranhamento, para realizar opera√ß√µes em dados. Diferente da computa√ß√£o cl√°ssica que usa bits (0 ou 1), a computa√ß√£o qu√¢ntica usa qubits, que podem existir em m√∫ltiplos estados simultaneamente.\";\n          break;\n        case 2:\n          botResponse = \"Qubits s√£o a unidade fundamental de informa√ß√£o na computa√ß√£o qu√¢ntica. Diferente dos bits cl√°ssicos, os qubits podem estar em superposi√ß√£o, existindo como 0 e 1 simultaneamente com diferentes probabilidades, at√© serem medidos.\";\n          break;\n        case 3:\n          botResponse = \"O emaranhamento qu√¢ntico √© um fen√¥meno onde dois ou mais qubits se tornam correlacionados de tal forma que o estado qu√¢ntico de cada part√≠cula n√£o pode ser descrito independentemente. Isso permite novas formas de processamento de informa√ß√£o imposs√≠veis na computa√ß√£o cl√°ssica.\";\n          break;\n        default:\n          botResponse = \"Estou aqui para ajudar voc√™ a entender os conceitos de computa√ß√£o qu√¢ntica relacionados a esta aula. Que aspecto espec√≠fico voc√™ gostaria de explorar?\";\n      }\n\n      // Bot message\n      const botMessage = {\n        id: Date.now() + 1,\n        text: botResponse,\n        sender: 'bot',\n        timestamp: new Date().toISOString()\n      };\n\n      // Update conversations with bot response\n      setConversations(prev => ({\n        ...prev,\n        [activeLesson.id]: [...(prev[activeLesson.id] || []), botMessage]\n      }));\n      return botMessage;\n    } catch (err) {\n      setError(err.message || 'Erro ao enviar mensagem');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, [activeLesson, currentUser]);\n\n  // Get conversation for current lesson\n  const getCurrentConversation = useCallback(() => {\n    if (!activeLesson || !currentUser) return [];\n    return conversations[activeLesson.id] || [];\n  }, [activeLesson, conversations, currentUser]);\n\n  // Get all user conversations\n  const getAllConversations = useCallback(() => {\n    return conversations;\n  }, [conversations]);\n\n  // Clear conversation for a lesson\n  const clearConversation = useCallback(lessonId => {\n    if (!currentUser) return;\n    setConversations(prev => ({\n      ...prev,\n      [lessonId]: []\n    }));\n  }, [currentUser]);\n\n  // Context value\n  const value = {\n    lessons: LESSONS,\n    activeLesson,\n    loading,\n    error,\n    getLessons,\n    getLessonById,\n    selectLesson,\n    sendMessage,\n    getCurrentConversation,\n    getAllConversations,\n    clearConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"Hx5sOdd6VOSO8c6kvKBqZvhzMXE=\");\n_c = ChatProvider;\nexport default ChatContext;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useCallback","useContext","useEffect","AuthContext","jsxDEV","_jsxDEV","ChatContext","LESSONS","id","title","description","icon","color","ChatProvider","children","_s","currentUser","activeLesson","setActiveLesson","conversations","setConversations","loading","setLoading","error","setError","storedConversations","localStorage","getItem","JSON","parse","Object","keys","length","setItem","stringify","getLessons","getLessonById","lessonId","find","lesson","Number","selectLesson","prev","sendMessage","message","userMessage","Date","now","text","sender","timestamp","toISOString","Promise","resolve","setTimeout","botResponse","botMessage","err","getCurrentConversation","getAllConversations","clearConversation","value","lessons","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Gibi/Documents/IMT_CIENCIA_DA_COMPUTACAO/PII/Chatbot_Quantum/ProjetoIntegrador2025/src/context/ChatContext.jsx"],"sourcesContent":["import React, { createContext, useState, useCallback, useContext, useEffect } from 'react';\r\nimport AuthContext from './AuthContext';\r\n\r\n// Create Chat Context\r\nexport const ChatContext = createContext();\r\n\r\n// Lessons data\r\nconst LESSONS = [\r\n  {\r\n    id: 1,\r\n    title: 'Introdu√ß√£o √† Computa√ß√£o Qu√¢ntica',\r\n    description: 'Fundamentos e conceitos b√°sicos da computa√ß√£o qu√¢ntica.',\r\n    icon: 'üî¨',\r\n    color: 'bg-blue-100',\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Qubits e Superposi√ß√£o',\r\n    description: 'Entendendo os bits qu√¢nticos e o princ√≠pio da superposi√ß√£o.',\r\n    icon: 'üîÑ',\r\n    color: 'bg-purple-100',\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Emaranhamento Qu√¢ntico',\r\n    description: 'O fen√¥meno do emaranhamento e suas aplica√ß√µes.',\r\n    icon: 'üîó',\r\n    color: 'bg-pink-100',\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'Portas Qu√¢nticas',\r\n    description: 'Opera√ß√µes b√°sicas em sistemas qu√¢nticos.',\r\n    icon: 'üö™',\r\n    color: 'bg-indigo-100',\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Algoritmos Qu√¢nticos I',\r\n    description: 'Algoritmo de Deutsch-Jozsa e outros algoritmos introdut√≥rios.',\r\n    icon: 'üìä',\r\n    color: 'bg-green-100',\r\n  },\r\n  {\r\n    id: 6,\r\n    title: 'Algoritmos Qu√¢nticos II',\r\n    description: 'Algoritmo de Grover e buscas qu√¢nticas.',\r\n    icon: 'üîç',\r\n    color: 'bg-yellow-100',\r\n  },\r\n  {\r\n    id: 7,\r\n    title: 'Algoritmos Qu√¢nticos III',\r\n    description: 'Algoritmo de Shor e fatora√ß√£o qu√¢ntica.',\r\n    icon: 'üî¢',\r\n    color: 'bg-red-100',\r\n  },\r\n  {\r\n    id: 8,\r\n    title: 'Corre√ß√£o de Erros Qu√¢nticos',\r\n    description: 'T√©cnicas para mitigar erros em computadores qu√¢nticos.',\r\n    icon: 'üõ†Ô∏è',\r\n    color: 'bg-orange-100',\r\n  },\r\n  {\r\n    id: 9,\r\n    title: 'Computadores Qu√¢nticos Atuais',\r\n    description: 'Estado da arte e implementa√ß√µes f√≠sicas.',\r\n    icon: 'üíª',\r\n    color: 'bg-teal-100',\r\n  },\r\n  {\r\n    id: 10,\r\n    title: 'Futuro da Computa√ß√£o Qu√¢ntica',\r\n    description: 'Tend√™ncias e desafios na √°rea.',\r\n    icon: 'üöÄ',\r\n    color: 'bg-cyan-100',\r\n  },\r\n];\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const { currentUser } = useContext(AuthContext);\r\n  const [activeLesson, setActiveLesson] = useState(null);\r\n  const [conversations, setConversations] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Load conversations from localStorage on mount or when user changes\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      const storedConversations = localStorage.getItem(`quantum_conversations_${currentUser.id}`);\r\n      if (storedConversations) {\r\n        setConversations(JSON.parse(storedConversations));\r\n      }\r\n    }\r\n  }, [currentUser]);\r\n\r\n  // Save conversations to localStorage when they change\r\n  useEffect(() => {\r\n    if (currentUser && Object.keys(conversations).length > 0) {\r\n      localStorage.setItem(\r\n        `quantum_conversations_${currentUser.id}`,\r\n        JSON.stringify(conversations)\r\n      );\r\n    }\r\n  }, [conversations, currentUser]);\r\n\r\n  // Get all lessons\r\n  const getLessons = useCallback(() => {\r\n    return LESSONS;\r\n  }, []);\r\n\r\n  // Get lesson by ID\r\n  const getLessonById = useCallback((lessonId) => {\r\n    return LESSONS.find(lesson => lesson.id === Number(lessonId)) || null;\r\n  }, []);\r\n\r\n  // Set active lesson\r\n  const selectLesson = useCallback((lessonId) => {\r\n    const lesson = getLessonById(lessonId);\r\n    setActiveLesson(lesson);\r\n    \r\n    // Initialize conversation for this lesson if it doesn't exist\r\n    if (currentUser && lesson) {\r\n      setConversations(prev => {\r\n        if (!prev[lesson.id]) {\r\n          return {\r\n            ...prev,\r\n            [lesson.id]: []\r\n          };\r\n        }\r\n        return prev;\r\n      });\r\n    }\r\n    \r\n    return lesson;\r\n  }, [currentUser, getLessonById]);\r\n\r\n  // Send message\r\n  const sendMessage = useCallback(async (message) => {\r\n    if (!activeLesson || !currentUser) return null;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // User message\r\n      const userMessage = {\r\n        id: Date.now(),\r\n        text: message,\r\n        sender: 'user',\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n      \r\n      // Update conversations with user message\r\n      setConversations(prev => ({\r\n        ...prev,\r\n        [activeLesson.id]: [...(prev[activeLesson.id] || []), userMessage]\r\n      }));\r\n      \r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Generate bot response based on lesson\r\n      let botResponse;\r\n      \r\n      switch(activeLesson.id) {\r\n        case 1:\r\n          botResponse = \"A computa√ß√£o qu√¢ntica √© um paradigma de computa√ß√£o que utiliza fen√¥menos da mec√¢nica qu√¢ntica, como superposi√ß√£o e emaranhamento, para realizar opera√ß√µes em dados. Diferente da computa√ß√£o cl√°ssica que usa bits (0 ou 1), a computa√ß√£o qu√¢ntica usa qubits, que podem existir em m√∫ltiplos estados simultaneamente.\";\r\n          break;\r\n        case 2:\r\n          botResponse = \"Qubits s√£o a unidade fundamental de informa√ß√£o na computa√ß√£o qu√¢ntica. Diferente dos bits cl√°ssicos, os qubits podem estar em superposi√ß√£o, existindo como 0 e 1 simultaneamente com diferentes probabilidades, at√© serem medidos.\";\r\n          break;\r\n        case 3:\r\n          botResponse = \"O emaranhamento qu√¢ntico √© um fen√¥meno onde dois ou mais qubits se tornam correlacionados de tal forma que o estado qu√¢ntico de cada part√≠cula n√£o pode ser descrito independentemente. Isso permite novas formas de processamento de informa√ß√£o imposs√≠veis na computa√ß√£o cl√°ssica.\";\r\n          break;\r\n        default:\r\n          botResponse = \"Estou aqui para ajudar voc√™ a entender os conceitos de computa√ß√£o qu√¢ntica relacionados a esta aula. Que aspecto espec√≠fico voc√™ gostaria de explorar?\";\r\n      }\r\n      \r\n      // Bot message\r\n      const botMessage = {\r\n        id: Date.now() + 1,\r\n        text: botResponse,\r\n        sender: 'bot',\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n      \r\n      // Update conversations with bot response\r\n      setConversations(prev => ({\r\n        ...prev,\r\n        [activeLesson.id]: [...(prev[activeLesson.id] || []), botMessage]\r\n      }));\r\n      \r\n      return botMessage;\r\n    } catch (err) {\r\n      setError(err.message || 'Erro ao enviar mensagem');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [activeLesson, currentUser]);\r\n\r\n  // Get conversation for current lesson\r\n  const getCurrentConversation = useCallback(() => {\r\n    if (!activeLesson || !currentUser) return [];\r\n    return conversations[activeLesson.id] || [];\r\n  }, [activeLesson, conversations, currentUser]);\r\n\r\n  // Get all user conversations\r\n  const getAllConversations = useCallback(() => {\r\n    return conversations;\r\n  }, [conversations]);\r\n\r\n  // Clear conversation for a lesson\r\n  const clearConversation = useCallback((lessonId) => {\r\n    if (!currentUser) return;\r\n    \r\n    setConversations(prev => ({\r\n      ...prev,\r\n      [lessonId]: []\r\n    }));\r\n  }, [currentUser]);\r\n\r\n  // Context value\r\n  const value = {\r\n    lessons: LESSONS,\r\n    activeLesson,\r\n    loading,\r\n    error,\r\n    getLessons,\r\n    getLessonById,\r\n    selectLesson,\r\n    sendMessage,\r\n    getCurrentConversation,\r\n    getAllConversations,\r\n    clearConversation\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={value}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ChatContext;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC1F,OAAOC,WAAW,MAAM,eAAe;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;;AAE1C;AACA,MAAMS,OAAO,GAAG,CACd;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,kCAAkC;EACzCC,WAAW,EAAE,yDAAyD;EACtEC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,uBAAuB;EAC9BC,WAAW,EAAE,6DAA6D;EAC1EC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,wBAAwB;EAC/BC,WAAW,EAAE,gDAAgD;EAC7DC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,kBAAkB;EACzBC,WAAW,EAAE,0CAA0C;EACvDC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,wBAAwB;EAC/BC,WAAW,EAAE,+DAA+D;EAC5EC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,yBAAyB;EAChCC,WAAW,EAAE,yCAAyC;EACtDC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,0BAA0B;EACjCC,WAAW,EAAE,yCAAyC;EACtDC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,6BAA6B;EACpCC,WAAW,EAAE,wDAAwD;EACrEC,IAAI,EAAE,KAAK;EACXC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,+BAA+B;EACtCC,WAAW,EAAE,0CAA0C;EACvDC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;AACT,CAAC,EACD;EACEJ,EAAE,EAAE,EAAE;EACNC,KAAK,EAAE,+BAA+B;EACtCC,WAAW,EAAE,gCAAgC;EAC7CC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE;AACT,CAAC,CACF;AAED,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM;IAAEC;EAAY,CAAC,GAAGf,UAAU,CAACE,WAAW,CAAC;EAC/C,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAG,SAAS,CAAC,MAAM;IACd,IAAIc,WAAW,EAAE;MACf,MAAMS,mBAAmB,GAAGC,YAAY,CAACC,OAAO,CAAC,yBAAyBX,WAAW,CAACR,EAAE,EAAE,CAAC;MAC3F,IAAIiB,mBAAmB,EAAE;QACvBL,gBAAgB,CAACQ,IAAI,CAACC,KAAK,CAACJ,mBAAmB,CAAC,CAAC;MACnD;IACF;EACF,CAAC,EAAE,CAACT,WAAW,CAAC,CAAC;;EAEjB;EACAd,SAAS,CAAC,MAAM;IACd,IAAIc,WAAW,IAAIc,MAAM,CAACC,IAAI,CAACZ,aAAa,CAAC,CAACa,MAAM,GAAG,CAAC,EAAE;MACxDN,YAAY,CAACO,OAAO,CAClB,yBAAyBjB,WAAW,CAACR,EAAE,EAAE,EACzCoB,IAAI,CAACM,SAAS,CAACf,aAAa,CAC9B,CAAC;IACH;EACF,CAAC,EAAE,CAACA,aAAa,EAAEH,WAAW,CAAC,CAAC;;EAEhC;EACA,MAAMmB,UAAU,GAAGnC,WAAW,CAAC,MAAM;IACnC,OAAOO,OAAO;EAChB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM6B,aAAa,GAAGpC,WAAW,CAAEqC,QAAQ,IAAK;IAC9C,OAAO9B,OAAO,CAAC+B,IAAI,CAACC,MAAM,IAAIA,MAAM,CAAC/B,EAAE,KAAKgC,MAAM,CAACH,QAAQ,CAAC,CAAC,IAAI,IAAI;EACvE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,YAAY,GAAGzC,WAAW,CAAEqC,QAAQ,IAAK;IAC7C,MAAME,MAAM,GAAGH,aAAa,CAACC,QAAQ,CAAC;IACtCnB,eAAe,CAACqB,MAAM,CAAC;;IAEvB;IACA,IAAIvB,WAAW,IAAIuB,MAAM,EAAE;MACzBnB,gBAAgB,CAACsB,IAAI,IAAI;QACvB,IAAI,CAACA,IAAI,CAACH,MAAM,CAAC/B,EAAE,CAAC,EAAE;UACpB,OAAO;YACL,GAAGkC,IAAI;YACP,CAACH,MAAM,CAAC/B,EAAE,GAAG;UACf,CAAC;QACH;QACA,OAAOkC,IAAI;MACb,CAAC,CAAC;IACJ;IAEA,OAAOH,MAAM;EACf,CAAC,EAAE,CAACvB,WAAW,EAAEoB,aAAa,CAAC,CAAC;;EAEhC;EACA,MAAMO,WAAW,GAAG3C,WAAW,CAAC,MAAO4C,OAAO,IAAK;IACjD,IAAI,CAAC3B,YAAY,IAAI,CAACD,WAAW,EAAE,OAAO,IAAI;IAE9CM,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAMqB,WAAW,GAAG;QAClBrC,EAAE,EAAEsC,IAAI,CAACC,GAAG,CAAC,CAAC;QACdC,IAAI,EAAEJ,OAAO;QACbK,MAAM,EAAE,MAAM;QACdC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC,CAACK,WAAW,CAAC;MACpC,CAAC;;MAED;MACA/B,gBAAgB,CAACsB,IAAI,KAAK;QACxB,GAAGA,IAAI;QACP,CAACzB,YAAY,CAACT,EAAE,GAAG,CAAC,IAAIkC,IAAI,CAACzB,YAAY,CAACT,EAAE,CAAC,IAAI,EAAE,CAAC,EAAEqC,WAAW;MACnE,CAAC,CAAC,CAAC;;MAEH;MACA,MAAM,IAAIO,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,IAAIE,WAAW;MAEf,QAAOtC,YAAY,CAACT,EAAE;QACpB,KAAK,CAAC;UACJ+C,WAAW,GAAG,uTAAuT;UACrU;QACF,KAAK,CAAC;UACJA,WAAW,GAAG,oOAAoO;UAClP;QACF,KAAK,CAAC;UACJA,WAAW,GAAG,sRAAsR;UACpS;QACF;UACEA,WAAW,GAAG,wJAAwJ;MAC1K;;MAEA;MACA,MAAMC,UAAU,GAAG;QACjBhD,EAAE,EAAEsC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC;QAClBC,IAAI,EAAEO,WAAW;QACjBN,MAAM,EAAE,KAAK;QACbC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC,CAACK,WAAW,CAAC;MACpC,CAAC;;MAED;MACA/B,gBAAgB,CAACsB,IAAI,KAAK;QACxB,GAAGA,IAAI;QACP,CAACzB,YAAY,CAACT,EAAE,GAAG,CAAC,IAAIkC,IAAI,CAACzB,YAAY,CAACT,EAAE,CAAC,IAAI,EAAE,CAAC,EAAEgD,UAAU;MAClE,CAAC,CAAC,CAAC;MAEH,OAAOA,UAAU;IACnB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZjC,QAAQ,CAACiC,GAAG,CAACb,OAAO,IAAI,yBAAyB,CAAC;MAClD,OAAO,IAAI;IACb,CAAC,SAAS;MACRtB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACL,YAAY,EAAED,WAAW,CAAC,CAAC;;EAE/B;EACA,MAAM0C,sBAAsB,GAAG1D,WAAW,CAAC,MAAM;IAC/C,IAAI,CAACiB,YAAY,IAAI,CAACD,WAAW,EAAE,OAAO,EAAE;IAC5C,OAAOG,aAAa,CAACF,YAAY,CAACT,EAAE,CAAC,IAAI,EAAE;EAC7C,CAAC,EAAE,CAACS,YAAY,EAAEE,aAAa,EAAEH,WAAW,CAAC,CAAC;;EAE9C;EACA,MAAM2C,mBAAmB,GAAG3D,WAAW,CAAC,MAAM;IAC5C,OAAOmB,aAAa;EACtB,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAMyC,iBAAiB,GAAG5D,WAAW,CAAEqC,QAAQ,IAAK;IAClD,IAAI,CAACrB,WAAW,EAAE;IAElBI,gBAAgB,CAACsB,IAAI,KAAK;MACxB,GAAGA,IAAI;MACP,CAACL,QAAQ,GAAG;IACd,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACrB,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAM6C,KAAK,GAAG;IACZC,OAAO,EAAEvD,OAAO;IAChBU,YAAY;IACZI,OAAO;IACPE,KAAK;IACLY,UAAU;IACVC,aAAa;IACbK,YAAY;IACZE,WAAW;IACXe,sBAAsB;IACtBC,mBAAmB;IACnBC;EACF,CAAC;EAED,oBACEvD,OAAA,CAACC,WAAW,CAACyD,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAA/C,QAAA,EAChCA;EAAQ;IAAAkD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpD,EAAA,CApKWF,YAAY;AAAAuD,EAAA,GAAZvD,YAAY;AAsKzB,eAAeP,WAAW;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}